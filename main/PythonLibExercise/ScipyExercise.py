"""
    本文通过案例介绍Scipy常用语法，作为后续参考
"""
import scipy.optimize
import numpy
import random

"""
scipy.optimize.linprog参数解答：
    c：线性目标函数的系数，为一维数组，该案例中为：[200,310]
    A_ub：可选，不等式约束矩阵，为二维数组，A_uv的每一行指定x上的线性不等式约束的系数。
          该案例中，需要先按标准把不等式变成<=，两边系数全变成负号，为：
          [[-0.15,-0.5],[-0.2,-0.3],[-0.5,-0.15]]
    b_ub：可选，不等式约束向量，为一维数组，该案例中为：[-15,-12,-12]
    A_eq：可选，等式约束矩阵，该案例中没有这种情况，置为空
    b_eq：可选，等式约束向量，该案例中没有这种情况，置为空
    bounds：可选，定义x的最小值和最大值，(min, max)序列对，默认>0，如果提供一个元组，则最小值和最大值将用作所有决策变量的界限
    method：可选，以下三种‘interior-point’, ‘revised simplex’, ‘simplex’
    callback：可选，回调函数，回调函数必须接受参数：scipy.optimize.OptimizeResult，这里不展开介绍
    options：选项，指定解决选项，为diction字典类型，key值如下：
        disp：打印优化状态指示器；node_limit：计算节点的最大数量；presolve：规避不可行的细节以简化主计算程序；
        time_limit：解决问题的最大秒数；mip_rel_gap：求解过程的终止依据，原文没看懂。

返回值是一个scipy.optimize.OptimizeResult的实例，包含如下值：
    status：0：找到了最优解；1：达到迭代或时间限制；2：问题无解；3：问题无限；4：其他，详见details。
    success：当status=0时为true
    message：详细描述
    x：最优的决策变量值，ndarray
    fun：最优的决策值c
    mip_node_count：求解问题中的节点数
    mip_dual_bound：求解器对最优解下界的最终估计
    mip_gap：原始目标值与对偶目标界限的区别（没懂）
"""


class LinearProgramming:
    """
    1、线性规划应用：生产供应问题
    问题：某炼油厂根据计划每季度需供应合同单位15吨汽油、12吨煤油、12吨重油。该厂从A、B两处运回原油提炼，已知两处原油成分为：
        A：含汽油15%，含煤油20%，含重油50%，含其他15%；
        B：含汽油50%，含煤油30%，含重油15%，含其他5%；
        从A处采购原油每吨价格（含运费，下同）为200元，B处原油每吨为310元。如何采购才能使费用最省？

    解答：
    先构造模型。假设需从A厂采购x1吨，从B厂采购x2吨。
          目标：min(200*x1 + 310*x2)
          约束条件：1、15吨汽油：0.15*x1 + 0.5*x2 >= 15
                  2、12吨煤油：0.2*x1 + 0.3*x2 >= 12
                  3、12吨重油：0.5*x1 + 0.15*x2 >= 12
                  4、x1、x2 >=0
    """

    def ProductionSupplyProblem(self):
        cc = numpy.array([200, 310])
        auv = numpy.array([[-0.15, -0.5], [-0.2, -0.3], [-0.5, -0.15]])
        buv = numpy.array([-15, -12, -12])
        orr = scipy.optimize.linprog(c=cc, A_ub=auv, b_ub=buv)
        print(orr)

    """
    2、线性规划应用：生产运输问题
    问题：你在全国各地有四个大型的工厂可以生产某种产品，这四个大型工厂分别为：西安，成都，东莞，哈尔滨。每个工厂都有一个产能的上限。
         全国有三家主要的销售地分别为：北京，上海，深圳。每个销售地对该产品有不同的需求。
         你需要做的是如何运输这些产品，使得在不超过各个工厂产能和满足各地需求的条件下，使得运输成本最小。
    """
    def ProductionAndDistribution(self):
        cc = numpy.array([9, 12, 14, 15, 16, 13, 18, 12, 1, 10, 21, 29])
        auv = numpy.array([[1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1],
                           [-1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0],
                           [0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0],
                           [0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1]
                           ]
                          )
        buv = numpy.array([20, 15, 35, 15, -30, -30, -25])
        orr = scipy.optimize.linprog(c=cc, A_ub=auv, b_ub=buv)
        print(orr)

    """
    2、线性规划应用：相亲问题
    问题：假设有4位男嘉宾、 4位女嘉宾来相亲，他们之间互相有一个匹配度，请设计一个最佳匹配方案，使得总体匹配度最高 。
    """
    def BlindDateProblem(self):
        cc = numpy.array([-4, -3, 0, -9, -1, 0, -2, -1, -3, -3, -2, -1, -4, -3, -3, -8])
        aeq = numpy.array([[1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0],
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1],
                           [1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0],
                           [0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0],
                           [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0],
                           [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1]
                           ])
        beq = numpy.array([1, 1, 1, 1, 1, 1, 1, 1])
        orr = scipy.optimize.linprog(c=cc, A_eq=aeq, b_eq=beq)
        print(orr)


"""    当直接运行本类时，打印默认初始化值，不做任何计算    """
if __name__ == "__main__":
    lp = LinearProgramming()
    lp.ProductionSupplyProblem()
    lp.ProductionAndDistribution()
    lp.BlindDateProblem()
